apiVersion: v1
kind: BuildConfig
metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: demo-pipeline
spec:
    triggers:
      - type: GitHub
        github:
          secretReference:
             name: "mysecert"
      - type: Generic
        generic:
          secretReference:
             name: "mysecret"
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: DEV_PROJECT
          value: knowledge-event
        jenkinsfile: |-
          pipeline {
            agent any
              stages {
                stage('Create Image Builder') {
                  when {
                    expression {
                      openshift.withCluster() {
                        openshift.withProject() {
                          return !openshift.selector("bc", "phpdemo").exists();
                        }
                      }
                    }
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          openshift.newBuild("--name=phpdemo", "php:7.2~https://github.com/rupadhy3/phpdemo.git")
                        }
                      }
                    }
                  }
                }
                stage('Build Image') {
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          openshift.selector("bc", "phpdemo").startBuild("--wait=true")
                        }
                      }
                    }
                  }
                }
                stage('Create APP') {
                  when {
                    expression {
                      openshift.withCluster() {
                        openshift.withProject() {
                          return !openshift.selector('dc', 'phpdemo').exists()
                        }
                      }
                    }
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          def app = openshift.newApp("phpdemo:latest", "--name=phpdemo")
                          app.narrow("svc").expose();
                          def dc = openshift.selector("dc", "phpdemo")
                          while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                          }
                          openshift.set("triggers", "dc/phpdemo", "--manual")
                        }
                      }
                    }
                  }
                }
                stage('Deploy APP') {
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                           openshift.selector("dc", "phpdemo").rollout().latest(); 
                        }
                      }
                    }
                  }
                }
              }
            }
      type: JenkinsPipeline  
